import React, { useEffect, useState, useRef } from "react";
import { createFFmpeg, fetchFile } from "@ffmpeg/ffmpeg"; // Correct import

const Preview = ({ layout, onClose }) => {
  const [currentContent, setCurrentContent] = useState([]);
  const [progress, setProgress] = useState(0);
  const totalDuration = useRef(0);
  const elapsedDuration = useRef(0); // Track total elapsed duration
  const progressInterval = useRef(null);
  const ffmpeg = useRef(null); // Store ffmpeg instance with useRef
  const [ffmpegReady, setFfmpegReady] = useState(false);

  // Initialize FFmpeg instance
  useEffect(() => {
    const loadFFmpeg = async () => {
      if (!ffmpeg.current) {
        ffmpeg.current = createFFmpeg({ log: true }); // Correct initialization
        await ffmpeg.current.load();
        setFfmpegReady(true);
      }
    };
    loadFFmpeg();
  }, []);

  useEffect(() => {
    if (layout && layout.divisions) {
      const content = layout.divisions.map((division) => {
        let divisionDuration = 0;

        division.imageSrcs.forEach((src, index) => {
          const mediaDuration = division.durations[index]
            ? division.durations[index] * 1000
            : 4000; // Fallback to 4 seconds if duration is missing
          divisionDuration += mediaDuration;
        });

        return {
          division,
          contentIndex: 0,
          divisionDuration,
        };
      });

      totalDuration.current = Math.max(
        ...content.map((c) => c.divisionDuration)
      );

      setCurrentContent(content);
      startProgress();
    }

    return () => {
      if (progressInterval.current) {
        clearInterval(progressInterval.current);
      }
    };
  }, [layout]);

  const startProgress = () => {
    progressInterval.current = setInterval(() => {
      elapsedDuration.current += 1000; // Increment every second
      setProgress(
        Math.min((elapsedDuration.current / totalDuration.current) * 100, 100)
      );

      if (elapsedDuration.current >= totalDuration.current) {
        clearInterval(progressInterval.current);
        stopMediaPlayback();
      }
    }, 1000); // Update progress every second
  };

  const stopMediaPlayback = () => {
    setCurrentContent([]);
  };

  useEffect(() => {
    if (currentContent.length > 0) {
      const timers = currentContent.map(({ division, contentIndex }, i) => {
        const duration = division.durations[contentIndex]
          ? division.durations[contentIndex] * 1000
          : 4000; // Fallback to 4 seconds if duration is missing

        setTimeout(() => {
          updateContent(i, division, contentIndex, duration);
        }, duration);

        return duration;
      });

      return () => timers.forEach((timer) => clearTimeout(timer));
    }
  }, [currentContent]);

  const updateContent = (i, division, contentIndex, duration) => {
    const newContent = [...currentContent];

    if (contentIndex + 1 < division.imageSrcs.length) {
      newContent[i].contentIndex = contentIndex + 1;
      setCurrentContent(newContent);
      elapsedDuration.current += duration;
    } else {
      if (!division.imageSrcs[contentIndex].endsWith(".mp4")) {
        setProgress(100);
      } else {
        setTimeout(() => {
          setProgress(100);
        }, duration);
      }
    }
  };

  const handleDownload = async () => {
    try {
      if (!ffmpegReady) {
        alert("FFmpeg is still loading, please wait...");
        return;
      }

      const inputFiles = [];

      for (const division of layout.divisions) {
        for (let i = 0; i < division.imageSrcs.length; i++) {
          const src = division.imageSrcs[i];

          // Fetch the file from the src URL using fetchFile
          const mediaData = await fetchFile(src);

          // Prepare the file name for the virtual FS
          const fileName = `input${inputFiles.length + 1}${
            src.endsWith(".mp4") ? ".mp4" : ".png"
          }`;

          // Write the file into FFmpeg's FS
          ffmpeg.current.FS("writeFile", fileName, mediaData); // Use ffmpeg.current
          inputFiles.push(fileName);
        }
      }

      // Create the concat list for FFmpeg
      const concatList = inputFiles
        .map((fileName) => `file '${fileName}'`)
        .join("\n");

      // Write the concat list into the FS
      ffmpeg.current.FS(
        "writeFile",
        "concatList.txt",
        new TextEncoder().encode(concatList)
      );

      // Run FFmpeg to concatenate all files into one video
      await ffmpeg.current.run(
        "-f",
        "concat",
        "-safe",
        "0",
        "-i",
        "concatList.txt",
        "-c",
        "copy",
        "output.mp4"
      );

      // Read the final output video
      const data = ffmpeg.current.FS("readFile", "output.mp4");

      // Create a Blob from the video data and trigger the download
      const videoBlob = new Blob([data.buffer], { type: "video/mp4" });
      const url = URL.createObjectURL(videoBlob);
      const link = document.createElement("a");
      link.href = url;
      link.download = `${layout.name || "layout_video"}.mp4`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      alert("Video download completed.");
    } catch (error) {
      console.error("Error during video creation:", error);
    }
  };

  return (
    <div
      style={{
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        backgroundColor: "rgba(0, 0, 0, 0.5)",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        zIndex: 1000,
      }}
    >
      <div
        style={{
          backgroundColor: "white",
          padding: "20px",
          position: "relative",
        }}
      >
        <button
          onClick={onClose}
          style={{
            position: "absolute",
            top: "10px",
            right: "10px",
            padding: "5px 10px",
            cursor: "pointer",
          }}
        >
          Close
        </button>
        <h2>Preview Layout: {layout.name}</h2>
        <div
          style={{
            position: "relative",
            width: "720px",
            height: "380px",
            border: "2px solid black",
          }}
        >
          {currentContent.map(({ division, contentIndex }, i) => (
            <div
              key={division.id}
              style={{
                position: "absolute",
                top: `${division.y}px`,
                left: `${division.x}px`,
                width: `${division.width}px`,
                height: `${division.height}px`,
                backgroundColor: division.color || "lightgray",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
              }}
            >
              {division.imageSrcs[contentIndex].endsWith(".mp4") ? (
                <video
                  src={division.imageSrcs[contentIndex]}
                  autoPlay
                  controls={false}
                  style={{
                    width: "100%",
                    height: "100%",
                    objectFit: "cover",
                    pointerEvents: "none",
                  }}
                />
              ) : (
                <img
                  src={division.imageSrcs[contentIndex]}
                  alt="content"
                  style={{
                    width: `${division.width}px`,
                    height: `${division.height}px`,
                    objectFit: "cover",
                  }}
                />
              )}
            </div>
          ))}
          <div
            style={{
              position: "absolute",
              bottom: 0,
              left: 0,
              width: "100%",
              height: "10px",
              backgroundColor: "#e0e0e0",
            }}
          >
            <div
              style={{
                width: `${progress}%`,
                height: "100%",
                backgroundColor: "#007bff",
                transition: "width 1s linear",
              }}
            ></div>
          </div>
        </div>

        {/* Download button */}
        <button
          onClick={handleDownload}
          style={{
            marginTop: "20px",
            padding: "10px 20px",
            cursor: "pointer",
            backgroundColor: "#28a745",
            color: "white",
            border: "none",
            borderRadius: "5px",
            fontSize: "16px",
            transition: "background-color 0.3s ease",
          }}
          onMouseOver={(e) => (e.target.style.backgroundColor = "#218838")}
          onMouseOut={(e) => (e.target.style.backgroundColor = "#28a745")}
        >
          Download Video
        </button>
      </div>
    </div>
  );
};

export default Preview;
